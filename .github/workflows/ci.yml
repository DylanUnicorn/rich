name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  BUILD_TYPE: Release

jobs:
  test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup CMake
      uses: lukka/get-cmake@latest
    
    - name: Setup MSVC (Windows only)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1
    
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel
    
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure --verbose
    
    - name: Install
      run: cmake --install ${{github.workspace}}/build --prefix ${{github.workspace}}/install
  
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup CMake
      uses: lukka/get-cmake@latest
    
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-format
    
    - name: Configure CMake (Debug for coverage)
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug
    
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config Debug --parallel
    
    - name: Run cppcheck
      run: |
        cppcheck --enable=all --std=c++17 \
                 --suppress=missingIncludeSystem \
                 --suppress=unusedFunction \
                 --error-exitcode=1 \
                 src/ include/
    
    - name: Check code formatting
      run: |
        find src include -name "*.cpp" -o -name "*.h" | \
        xargs clang-format --dry-run --Werror
    
    - name: Test with coverage
      working-directory: ${{github.workspace}}/build
      run: ctest -C Debug --output-on-failure --verbose
    
    - name: Generate coverage report (if available)
      if: success()
      run: |
        if command -v gcov &> /dev/null; then
          echo "Generating coverage report..."
          find ${{github.workspace}}/build -name "*.gcno" -exec gcov {} \;
        fi

  build-artifacts:
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup CMake
      uses: lukka/get-cmake@latest
    
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel
    
    - name: Package
      working-directory: ${{github.workspace}}/build
      run: cpack
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: rich-game-artifacts
        path: |
          ${{github.workspace}}/build/bin/
          ${{github.workspace}}/build/*.tar.gz
          ${{github.workspace}}/build/*.zip